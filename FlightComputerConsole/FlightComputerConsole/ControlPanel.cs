using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FlightComputerConsole
{
    public partial class ControlPanel : Form
    {

        /*******************************************************************************
        Private Properties
        *******************************************************************************/
        private string strCommandLineLostFocus = "Command...";
        private string strAttachedDevice = "None";
        private string DeviceVersion = "";
        private bool ConnectedToADevice = false;

        private LinkedList<string> CommandHistory;
        private LinkedList<string> CommandPreviousList;

        private int[] MotorSpeeds;
        private string QueuedCommand;
        private string QueuedReponse;
        private string Altitude;
        private string CurrentPressure;
        private string StartingPressure;
        private string CurrentTemp;
        private string[] Orientation;
        private string Roll;
        private string Pitch;
        private string Yaw;


        /*******************************************************************************
        Constructor
        *******************************************************************************/
        public ControlPanel()
        {
            //Draw the form. This was generated by Visual Studio.
            InitializeComponent();

            QueuedReponse = "";
            QueuedCommand = "";

            //Initialize everything else.
            MotorSpeeds = new int[]{ 0, 0, 0, 0, 0, 0};
            Orientation = new string[] { "", "", "", "" };

            //Initialize the thread for communicatting with the flight computer or Arduino.
            CommsWorker.WorkerSupportsCancellation = true;
            CommsWorker.WorkerReportsProgress = true;

            try
            {
                serialPort.ReadTimeout = 1000;
                serialPort.WriteTimeout = 500;
                serialPort.Open();
            }
            catch (Exception e)
            {
                WriteToConsole(e.ToString(), Color.Red);
            }

            if (CommsWorker.IsBusy != true)
            {
                CommsWorker.RunWorkerAsync();
            }

            this.ResponseBox.AppendText(System.Environment.NewLine);

            CommandHistory = new LinkedList<string>();
            CommandPreviousList = new LinkedList<string>();
        }

        /*******************************************************************************
        Event Handlers
        *******************************************************************************/
        private void CommandLine_KeyDown(Object Sender, KeyEventArgs e)
        {
            //If the enter key was pressed down.
            if (e.KeyCode == Keys.Enter)
            {
                //Echo command.
                WriteToConsole(this.CommandLine.Text, Color.Blue);
                CommandHistory.AddFirst(this.CommandLine.Text);
                CommandPreviousList.Clear();

                //If the clear command was entered.
                if (this.CommandLine.Text.Trim().ToLower() == "clear")          { Command_Clear(); }
                else if (this.CommandLine.Text.Trim().ToLower() == "connect")   { Command_Connect(); }
                else if (this.CommandLine.Text.Trim().ToLower() == "disconnect") { Command_Disconnect(); }
                else if (this.CommandLine.Text.Trim().ToLower() == "show port") { Command_ShowCurrentPort(); }
                else if (this.CommandLine.Text.Trim().ToLower().Contains("set port"))
                {
                    try
                    {
                        Command_SetPort(Int32.Parse(this.CommandLine.Text.Substring("set port".Length)));
                    }
                    catch (Exception error)
                    {
                        WriteToConsole(error.ToString(), Color.Red);
                    }
                }
                else if (this.CommandLine.Text.Trim().ToLower().Contains("set baud rate"))
                {
                    try
                    {
                        Command_SetBaudRate(Int32.Parse(this.CommandLine.Text.Substring("set baud rate".Length)));
                    }
                    catch (Exception error)
                    {
                        WriteToConsole(error.ToString(), Color.Red);
                    }
                }
                else if (this.CommandLine.Text.Trim().ToLower().Contains("fc"))
                {
                    //Flight computer commands are interpreted by the flight comptuer itself. Relay command.
                    Command_FlightComputer(this.CommandLine.Text.Substring("FC ".Length));
                }

                if (ResponseBox.Text.Length != 0)
                {
                    ResponseBox.Select(ResponseBox.Text.Length - 1, 0);
                    ResponseBox.ScrollToCaret();
                }

                //Clear the command box
                this.CommandLine.Text = "";

                //Set handled flag.
                e.Handled = true;
            }

            //If the up key was pressed down.
            else if (e.KeyCode == Keys.Up)
            {
                if (CommandHistory.Count > 0)
                {
                    this.CommandLine.Text = CommandHistory.First();
                    CommandPreviousList.AddFirst(CommandHistory.First());
                    this.CommandLine.SelectionStart = this.CommandLine.Text.Length;
                    this.CommandLine.SelectionLength = 0;
                    CommandHistory.RemoveFirst();
                }
                //Set handled flag.
                e.Handled = true;
            }

            //If the down key was pressed down.
            else if (e.KeyCode == Keys.Down)
            {
                if (CommandPreviousList.Count > 0)
                {
                    this.CommandLine.Text = CommandPreviousList.First();
                    CommandHistory.AddFirst(CommandPreviousList.First());
                    this.CommandLine.SelectionStart = this.CommandLine.Text.Length;
                    this.CommandLine.SelectionLength = 0;
                    CommandPreviousList.RemoveFirst();
                }
                //Set handled flag.
                e.Handled = true;
            }
        }

        private void CommandLine_GotFocus(Object Sender, EventArgs e)
        {
            if (this.CommandLine.Text == strCommandLineLostFocus)
            {
                this.CommandLine.Text = "";
                this.CommandLine.ForeColor = System.Drawing.SystemColors.ControlText;
            }
        }

        private void CommandLine_LostFocus(Object Sender, EventArgs e)
        {
            if (this.CommandLine.Text == "")
            {
                this.CommandLine.Text = strCommandLineLostFocus;
                this.CommandLine.ForeColor = System.Drawing.SystemColors.ControlDark;
            }
        }

        private void CommsWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker worker = sender as BackgroundWorker;

            //Initialize serial port comms.
            strAttachedDevice = ReadPort("WhoAreYou?");
            DeviceVersion = ReadPort("GetVersion");

            //If we got a response back.
            while (worker.CancellationPending !=  true)
            {
                if (strAttachedDevice == "Arduino")
                {
                    //Get flight data.
                    Altitude = ReadPort("GetAltitude");
                    CurrentPressure = ReadPort("GetPressure");
                    StartingPressure = ReadPort("GetStartingPressure");
                    CurrentTemp = ReadPort("GetTemperature");

                    //Arduino can't provide this information.
                    for (int i = 0; i < Orientation.Length; i++)
                    {
                        Orientation[i] = "Not Available";
                    }
                    for (int i = 0; i < MotorSpeeds.Length; i++)
                    {
                        MotorSpeeds[i] = 0;
                    }
                    Roll = "Not Available";
                    Pitch = "Not Available";
                    Yaw = "Not Available";
                }

                else if (strAttachedDevice == "Flight Computer")
                {
                    //Get everything.
                    if (QueuedCommand != "")
                    {
                        QueuedReponse = ReadPort(QueuedCommand);
                        QueuedCommand = "";
                    }
                    Altitude = ReadPort("GetAltitude");
                    CurrentPressure = ReadPort("GetPressure");
                    StartingPressure = ReadPort("GetStartingPressure");
                    CurrentTemp = ReadPort("GetTemperature");
                    Orientation = ReadPort("GetOrientation").Split(' ');
                    Roll = ReadPort("GetRoll");
                    Pitch = ReadPort("GetPitch");
                    Yaw = ReadPort("GetYaw");
                }

                CommsWorker.ReportProgress(0);
            }
        }

        private void CommsWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            if (!ConnectedToADevice)
            {
                ConnectedToADevice = !ConnectedToADevice;
                WriteToConsole("Found device " +
                                strAttachedDevice +
                                " version " +
                                DeviceVersion +
                                " on serial port " +
                                serialPort.PortName,
                                Color.Black);
            }

            //Output motor 1 speeds.
            if (MotorSpeeds[0] == 0)
            {
                outMotor1.ForeColor = Color.Red;
                outMotor1.Text = "Stalled";
            }
            else
            {
                outMotor1.ForeColor = Color.Black;
                outMotor1.Text = MotorSpeeds[0].ToString();
            }

            //Output motor 2 speeds.
            if (MotorSpeeds[1] == 0)
            {
                outMotor2.ForeColor = Color.Red;
                outMotor2.Text = "Stalled";
            }
            else
            {
                outMotor2.ForeColor = Color.Black;
                outMotor2.Text = MotorSpeeds[0].ToString();
            }

            //Output motor 3 speeds.
            if (MotorSpeeds[2] == 0)
            {
                outMotor3.ForeColor = Color.Red;
                outMotor3.Text = "Stalled";
            }
            else
            {
                outMotor3.ForeColor = Color.Black;
                outMotor3.Text = MotorSpeeds[0].ToString();
            }

            //Output motor 4 speeds.
            if (MotorSpeeds[3] == 0)
            {
                outMotor4.ForeColor = Color.Red;
                outMotor4.Text = "Stalled";
            }
            else
            {
                outMotor4.ForeColor = Color.Black;
                outMotor4.Text = MotorSpeeds[0].ToString();
            }

            //Output motor 5 speeds.
            if (MotorSpeeds[4] == 0)
            {
                outMotor5.ForeColor = Color.Red;
                outMotor5.Text = "Stalled";
            }
            else
            {
                outMotor5.ForeColor = Color.Black;
                outMotor5.Text = MotorSpeeds[0].ToString();
            }

            //Output motor 6 speeds.
            if (MotorSpeeds[5] == 0)
            {
                outMotor6.ForeColor = Color.Red;
                outMotor6.Text = "Stalled";
            }
            else
            {
                outMotor6.ForeColor = Color.Black;
                outMotor6.Text = MotorSpeeds[0].ToString();
            }

            //Output Altitude
            if (Altitude.Contains("Not Available"))         { outAltitude.ForeColor = Color.Red; }
            else                                            { outAltitude.ForeColor = Color.Black; }
            outAltitude.Text = Altitude;

            //Output Current Pressure
            if (CurrentPressure.Contains("Not Available"))  { outCurrentPressure.ForeColor = Color.Red; }
            else                                            { outCurrentPressure.ForeColor = Color.Black; }
            outCurrentPressure.Text = CurrentPressure;

            //Output Altitude
            if (StartingPressure.Contains("Not Available")) { outStartingPressure.ForeColor = Color.Red; }
            else                                            { outStartingPressure.ForeColor = Color.Black; }
            outStartingPressure.Text = StartingPressure;

            //Output Altitude
            if (CurrentTemp.Contains("Not Available"))      { outCurrentTemp.ForeColor = Color.Red; }
            else                                            { outCurrentTemp.ForeColor = Color.Black; }
            outCurrentTemp.Text = CurrentTemp;

            try {
                //Output Q0
                if (Orientation[0].Contains("Not Available")) { outQ0.ForeColor = Color.Red; }
                else { outQ0.ForeColor = Color.Black; }
                outQ0.Text = Orientation[0];

                //Output Q1
                if (Orientation[1].Contains("Not Available")) { outQ1.ForeColor = Color.Red; }
                else { outQ1.ForeColor = Color.Black; }
                outQ1.Text = Orientation[1];

                //Output Q2
                if (Orientation[2].Contains("Not Available")) { outQ2.ForeColor = Color.Red; }
                else { outQ2.ForeColor = Color.Black; }
                outQ2.Text = Orientation[2];

                //Output Q3
                if (Orientation[3].Contains("Not Available")) { outQ3.ForeColor = Color.Red; }
                else { outQ3.ForeColor = Color.Black; }
                outQ3.Text = Orientation[3];
            }
            catch (Exception)
            {
                outQ0.Text = "Error";
                outQ1.Text = "Error";
                outQ2.Text = "Error";
                outQ3.Text = "Error";
            }

            //Output Roll
            if (Roll.Contains("Not Available"))             { outRoll.ForeColor = Color.Red; }
            else                                            { outRoll.ForeColor = Color.Black; }
            outRoll.Text = Roll;

            //Output Pitch
            if (Pitch.Contains("Not Available"))            { outPitch.ForeColor = Color.Red; }
            else                                            { outPitch.ForeColor = Color.Black; }
            outPitch.Text = Pitch;

            //Output Yaw
            if (Yaw.Contains("Not Available"))              { outYaw.ForeColor = Color.Red; }
            else                                            { outYaw.ForeColor = Color.Black; }
            outYaw.Text = Yaw;

            if (QueuedReponse != "")
            {
                WriteToConsole("Flight Computer: " + QueuedReponse, Color.Blue);
                QueuedReponse = "";
                QueuedCommand = "";
            }
        }

        private void CommsWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                WriteToConsole(e.Error.Message, Color.Red);
            }

            if (!ConnectedToADevice)
            {
                WriteToConsole("No device attached. Closing " + serialPort.PortName, Color.Red);
            }
            else
            {
                ConnectedToADevice = !ConnectedToADevice;
            }
        }

        /*******************************************************************************
        Private Methods
        *******************************************************************************/

        private string ReadPort(string Outgoing)
        {
            string Incoming = "";
            byte[] inbuffer = new byte[255];
            //Outgoing += Char.MinValue;

            try
            {
                byte[] buffer = new byte[Outgoing.Length];
                buffer = System.Text.Encoding.ASCII.GetBytes(Outgoing);

                serialPort.Write(buffer, 0, buffer.Length);
                Incoming = serialPort.ReadLine();
            }

            catch(Exception e)
            {
                if (!ConnectedToADevice)
                {
                    strAttachedDevice = "None";
                    Incoming = "No device attached.";
                    serialPort.Close();
                    CommsWorker.CancelAsync();

                    //No device attached, so report everything as zeroes.
                    foreach (int i in MotorSpeeds)
                    {
                        MotorSpeeds[i] = 0;
                    }
                    Altitude = "Not Available";
                    CurrentPressure = "Not Available";
                    StartingPressure = "Not Available";
                    CurrentTemp = "Not Available";
                    for (int i = 0; i < Orientation.Length; i++)
                    {
                        Orientation[i] = "Not Available";
                    }
                    Roll = "Not Available";
                    Pitch = "Not Available";
                    Yaw = "Not Available";
                }
            }

            return Incoming;
        }

        private string ReadFlightComputerPort(string Outgoing)
        {
            string Incoming = "";
            return Incoming;
        }

        private void Command_Clear()
        {
            //Clear response box.
            this.ResponseBox.Text = "";
        }

        private void Command_Connect()
        {
            try
            {
                serialPort.Open();
                if (CommsWorker.IsBusy != true)
                {
                    CommsWorker.RunWorkerAsync();
                }
                //return "Succesfully opened " + serialPort.PortName + " at " + serialPort.BaudRate.ToString();
                WriteToConsole("Succesfully opened " + serialPort.PortName + " at " + serialPort.BaudRate.ToString(), Color.Black);
            }
            catch (Exception e)
            {
                WriteToConsole(e.ToString(), Color.Red);
            }
        }

        private void Command_SetBaudRate(int BaudRate)
        {
            if (!serialPort.IsOpen)
            {
                serialPort.BaudRate = BaudRate;
                WriteToConsole("Baud rate set to " + serialPort.BaudRate.ToString(), Color.Black);
            }
            else
            {
                WriteToConsole("Must disconnect from device first before editing baud rate!", Color.Red);
            }
            
        }

        private void Command_SetPort(int Port)
        {
            if(!serialPort.IsOpen)
            {
                serialPort.PortName = "COM" + Port.ToString();
                WriteToConsole("Port set to " + serialPort.PortName, Color.Black);
            }
            else
            {
                WriteToConsole("Must disconnect from device first before setting the port!", Color.Red);
            }
        }

        private void Command_Disconnect()
        {
            if (serialPort.IsOpen)
            {
                serialPort.Close();
                CommsWorker.CancelAsync();
                WriteToConsole("Disconnected from " + serialPort.PortName, Color.Black);
            }
            else
            {
                WriteToConsole("Already disconnected from " + serialPort.PortName, Color.Red);
            }
        }

        private void Command_ShowCurrentPort()
        {
            WriteToConsole("Current port is " + serialPort.PortName + " at " + serialPort.BaudRate, Color.Black);
        }

        private void Command_CommsTest()
        {
            WriteToConsole(ReadPort("SelfTest"), Color.Black);
        }

        private void Command_FlightComputer(string Command)
        {
            //while (QueuedReponse == "") { }
            //WriteToConsole("Flight Computer: " + QueuedReponse, Color.Blue);
            //QueuedReponse = "";
            QueuedCommand = Command;
        }

        private void WriteToConsole(string text, Color color)
        {
            this.ResponseBox.SelectionStart = this.ResponseBox.TextLength;
            this.ResponseBox.SelectionLength = 0;

            this.ResponseBox.SelectionColor = color;
            this.ResponseBox.AppendText(text + System.Environment.NewLine);
            this.ResponseBox.SelectionColor = this.ResponseBox.ForeColor;
        }

        private void ResponseBox_TextChanged(object sender, EventArgs e)
        {

        }

        private void ControlPanel_Load(object sender, EventArgs e)
        {

        }
    }
}
